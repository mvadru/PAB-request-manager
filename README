<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SASE Web Request Manager Guide</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chosen Palette: "Cool Gray & Slate Blue" -->
    <!-- Application Structure Plan: [The application is structured as a single-page app with a persistent side navigation bar and a main content area. This design was chosen over a linear document to better suit a technical guide, allowing users to quickly jump to specific sections like 'Setup' or 'Features' without scrolling. This non-linear navigation improves usability and information retrieval. The core interaction is switching between content panels, with a special interactive wizard for the 'Setup' section to make the process less intimidating and more engaging.] -->
    <!-- Visualization & Content Choices: [Report Info: Project Features -> Goal: Inform -> Presentation: A grid of feature 'cards' with icons (Unicode) and text. -> Interaction: Subtle hover effects. Justification: More visually appealing and scannable than a simple bulleted list. | Report Info: Setup Steps -> Goal: Guide -> Presentation: An interactive, step-by-step wizard. -> Interaction: 'Next'/'Previous' buttons to navigate steps, and a 'Copy' button for each code block. Justification: Breaks a complex process into manageable chunks, improving user comprehension and reducing errors. | Report Info: Code Snippets -> Goal: Instruct -> Presentation: Styled code blocks. -> Interaction: Copy-to-clipboard button. Justification: A major usability enhancement for technical documentation.] -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* slate-50 */
        }
        .code-block {
            background-color: #1e293b; /* slate-800 */
            color: #e2e8f0; /* slate-200 */
            border-radius: 0.5rem;
            padding: 1rem;
            position: relative;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .copy-btn {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background-color: #475569; /* slate-600 */
            color: #f8fafc; /* slate-50 */
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            cursor: pointer;
            font-size: 0.875rem;
            opacity: 0.7;
            transition: opacity 0.2s;
        }
        .code-block:hover .copy-btn {
            opacity: 1;
        }
        .nav-link.active {
            background-color: #e2e8f0; /* slate-200 */
            color: #0f172a; /* slate-900 */
            font-weight: 600;
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
        .setup-step {
            display: none;
        }
        .setup-step.active {
            display: block;
        }
    </style>
</head>
<body class="text-slate-700">

    <div class="flex flex-col md:flex-row min-h-screen">
        <!-- Sidebar Navigation -->
        <aside class="w-full md:w-64 bg-white border-b md:border-b-0 md:border-r border-slate-200 flex-shrink-0">
            <div class="p-6">
                <h1 class="text-xl font-bold text-slate-900">SASE Manager</h1>
                <p class="text-sm text-slate-500">Interactive Guide</p>
            </div>
            <nav id="main-nav" class="flex flex-row md:flex-col p-3 space-x-2 md:space-x-0 md:space-y-2">
                <a href="#" class="nav-link active px-4 py-2 rounded-lg text-slate-600 hover:bg-slate-100" data-target="overview">Overview</a>
                <a href="#" class="nav-link px-4 py-2 rounded-lg text-slate-600 hover:bg-slate-100" data-target="features">Features</a>
                <a href="#" class="nav-link px-4 py-2 rounded-lg text-slate-600 hover:bg-slate-100" data-target="setup">Setup Guide</a>
                <a href="#" class="nav-link px-4 py-2 rounded-lg text-slate-600 hover:bg-slate-100" data-target="usage">Usage</a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 p-6 md:p-10 bg-slate-50">
            
            <!-- Overview Section -->
            <section id="overview-section" class="content-section active">
                <h2 class="text-3xl font-bold text-slate-900 mb-4">SASE Web Request Manager Guide</h2>
                <p class="text-lg mb-6 max-w-3xl">Welcome to the interactive guide for the SASE Web Request Manager. This application provides a simple and efficient way to view and manage user web access requests from the Palo Alto Networks SASE platform. This guide will walk you through its features, setup, and usage.</p>
                <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded-r-lg max-w-3xl">
                    <p>Use the navigation on the left to explore the different sections. For the best experience, follow the "Setup Guide" step-by-step.</p>
                </div>
            </section>

            <!-- Features Section -->
            <section id="features-section" class="content-section">
                <h2 class="text-3xl font-bold text-slate-900 mb-6">Core Features</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">üìú</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">View Requests</h3>
                        <p class="text-slate-600">Displays a list of all user web access requests, including the user, website, reason, and time.</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">üö¶</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">Filter by Status</h3>
                        <p class="text-slate-600">Easily toggle between viewing only "pending" requests and viewing all requests.</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">‚úÖ</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">Approve/Decline Actions</h3>
                        <p class="text-slate-600">Quickly approve or decline pending requests directly from the main interface.</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">‚è±Ô∏è</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">Flexible Durations</h3>
                        <p class="text-slate-600">Approve access "Once", for "10 minutes", or for a custom duration specified in minutes.</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">üîÑ</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">Auto-Refresh</h3>
                        <p class="text-slate-600">The request list automatically refreshes every 30 seconds to show new incoming requests.</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg border border-slate-200 transition-transform hover:scale-105 hover:shadow-lg">
                        <span class="text-3xl mb-3 block">üõ°Ô∏è</span>
                        <h3 class="font-semibold text-lg text-slate-800 mb-2">Secure Backend</h3>
                        <p class="text-slate-600">Uses a Node.js server to securely handle API authentication and protect credentials.</p>
                    </div>
                </div>
            </section>
            
            <!-- Setup Section -->
            <section id="setup-section" class="content-section">
                <h2 class="text-3xl font-bold text-slate-900 mb-2">Installation & Setup Guide</h2>
                <p class="text-base mb-6 max-w-3xl">Follow these steps to get the application running on your local machine. This interactive guide will walk you through the process one step at a time.</p>

                <div id="setup-wizard" class="bg-white p-6 rounded-lg border border-slate-200 max-w-3xl">
                    <!-- Step 1: Prerequisites -->
                    <div class="setup-step active" data-step="1">
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">Step 1: Prerequisites</h3>
                        <p class="mb-4">Before you begin, make sure you have the following installed on your system:</p>
                        <ul class="list-disc list-inside space-y-2 mb-4">
                            <li><a href="https://nodejs.org/" target="_blank" class="text-blue-600 hover:underline">Node.js</a> (LTS version recommended)</li>
                            <li>npm (which comes bundled with Node.js)</li>
                        </ul>
                    </div>

                    <!-- Step 2: Clone -->
                    <div class="setup-step" data-step="2">
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">Step 2: Clone the Repository</h3>
                        <p class="mb-4">Get the project files on your local machine by cloning the repository from GitHub.</p>
                        <div class="code-block" data-code="git clone https://github.com/your-username/sase-request-manager.git
cd sase-request-manager">
                            <pre><code>git clone https://github.com/your-username/sase-request-manager.git
cd sase-request-manager</code></pre>
                            <button class="copy-btn">Copy</button>
                        </div>
                    </div>

                    <!-- Step 3: Dependencies -->
                    <div class="setup-step" data-step="3">
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">Step 3: Install Dependencies</h3>
                        <p class="mb-4">Navigate into the project's root directory and install the required Node.js packages using npm.</p>
                         <div class="code-block" data-code="npm install">
                            <pre><code>npm install</code></pre>
                            <button class="copy-btn">Copy</button>
                        </div>
                    </div>

                    <!-- Step 4: Credentials -->
                    <div class="setup-step" data-step="4">
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">Step 4: Configure Credentials</h3>
                        <p class="mb-4">Create a file named `secrets.txt` in the root of the project directory. This file is ignored by Git and will not be uploaded to GitHub.</p>
                        <p class="font-semibold mb-2">Add your SASE API credentials to this file:</p>
                        <div class="code-block" data-code="TSG_ID=your_tsg_id_here
CLIENT_ID=your_client_id_here
CLIENT_SECRET=your_client_secret_here">
                            <pre><code>TSG_ID=your_tsg_id_here
CLIENT_ID=your_client_id_here
CLIENT_SECRET=your_client_secret_here</code></pre>
                            <button class="copy-btn">Copy</button>
                        </div>
                    </div>
                    
                    <!-- Step 5: Endpoint -->
                    <div class="setup-step" data-step="5">
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">Step 5: Configure the API Endpoint</h3>
                        <p class="mb-4">Open the `server.js` file and ensure the `API_BASE_URL` constant is set to the correct URL for your SASE region (e.g., `https://api-amer.sase.paloaltonetworks.com`).</p>
                    </div>

                    <!-- Navigation for Wizard -->
                    <div class="mt-6 flex justify-between items-center border-t border-slate-200 pt-4">
                        <button id="prev-step" class="bg-slate-200 text-slate-800 px-4 py-2 rounded-lg hover:bg-slate-300 disabled:opacity-50 disabled:cursor-not-allowed">Previous</button>
                        <span id="step-indicator" class="text-sm font-medium text-slate-500">Step 1 of 5</span>
                        <button id="next-step" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Next</button>
                    </div>
                </div>
            </section>

            <!-- Usage Section -->
            <section id="usage-section" class="content-section">
                <h2 class="text-3xl font-bold text-slate-900 mb-6">How to Use the Application</h2>
                <div class="space-y-6 max-w-3xl">
                    <div>
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">1. Start the Server</h3>
                        <p class="mb-4">Once the setup is complete, you can start the application server from the project's root directory.</p>
                        <div class="code-block" data-code="npm start">
                            <pre><code>npm start</code></pre>
                            <button class="copy-btn">Copy</button>
                        </div>
                        <p class="mt-4">You should see a confirmation message in your terminal: <code class="text-sm bg-slate-200 text-slate-800 px-1 py-0.5 rounded">Server running at http://localhost:3000</code>.</p>
                    </div>
                    <div>
                        <h3 class="font-semibold text-xl text-slate-800 mb-3">2. Access the Application</h3>
                        <p class="mb-4">Open your web browser and navigate to the following address:</p>
                        <div class="code-block">
                            <a href="http://localhost:3000" target="_blank" class="text-green-400 hover:underline">http://localhost:3000</a>
                        </div>
                        <p class="mt-4">The web interface will load, fetch the requests, and be ready for use.</p>
                    </div>
                </div>
            </section>

        </main>
    </div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const mainNav = document.getElementById('main-nav');
    const contentSections = document.querySelectorAll('.content-section');
    const navLinks = document.querySelectorAll('.nav-link');
    
    // Main navigation logic
    mainNav.addEventListener('click', function (e) {
        e.preventDefault();
        const targetLink = e.target.closest('.nav-link');
        if (!targetLink) return;

        const targetId = targetLink.dataset.target;

        navLinks.forEach(link => link.classList.remove('active'));
        targetLink.classList.add('active');

        contentSections.forEach(section => {
            if (section.id === `${targetId}-section`) {
                section.classList.add('active');
            } else {
                section.classList.remove('active');
            }
        });
    });

    // Setup wizard logic
    const setupWizard = document.getElementById('setup-wizard');
    if(setupWizard) {
        const prevBtn = document.getElementById('prev-step');
        const nextBtn = document.getElementById('next-step');
        const stepIndicator = document.getElementById('step-indicator');
        const steps = setupWizard.querySelectorAll('.setup-step');
        let currentStep = 1;
        const totalSteps = steps.length;

        function updateWizard() {
            steps.forEach(step => {
                if (parseInt(step.dataset.step) === currentStep) {
                    step.classList.add('active');
                } else {
                    step.classList.remove('active');
                }
            });
            stepIndicator.textContent = `Step ${currentStep} of ${totalSteps}`;
            prevBtn.disabled = currentStep === 1;
            nextBtn.disabled = currentStep === totalSteps;
        }

        prevBtn.addEventListener('click', function() {
            if (currentStep > 1) {
                currentStep--;
                updateWizard();
            }
        });

        nextBtn.addEventListener('click', function() {
            if (currentStep < totalSteps) {
                currentStep++;
                updateWizard();
            }
        });
        updateWizard();
    }
    
    // Copy to clipboard logic
    document.body.addEventListener('click', function(e) {
        if (e.target.classList.contains('copy-btn')) {
            const btn = e.target;
            const codeBlock = btn.closest('.code-block');
            const codeToCopy = codeBlock.dataset.code || codeBlock.querySelector('pre code').innerText;
            
            const tempTextArea = document.createElement('textarea');
            tempTextArea.value = codeToCopy;
            document.body.appendChild(tempTextArea);
            tempTextArea.select();
            document.execCommand('copy');
            document.body.removeChild(tempTextArea);

            const originalText = btn.textContent;
            btn.textContent = 'Copied!';
            btn.style.backgroundColor = '#16a34a'; // green-600
            setTimeout(() => {
                btn.textContent = originalText;
                btn.style.backgroundColor = '';
            }, 2000);
        }
    });
});
</script>

</body>
</html>
